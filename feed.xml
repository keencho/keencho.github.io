<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://keencho.github.io/</id><title>keencho's blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2025-09-25T13:39:36+09:00</updated> <author> <name>keencho</name> <uri>https://keencho.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://keencho.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KS" href="https://keencho.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 keencho </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>JPA Transactional 점검하기</title><link href="https://keencho.github.io/posts/transactional-think/" rel="alternate" type="text/html" title="JPA Transactional 점검하기" /><published>2025-06-27T20:12:00+09:00</published> <updated>2025-06-27T20:12:00+09:00</updated> <id>https://keencho.github.io/posts/transactional-think/</id> <content src="https://keencho.github.io/posts/transactional-think/" /> <author> <name>keencho</name> </author> <category term="Java" /> <summary> JPA Transactional 점검하기 JPA를 다루는 개발자라면 Transactional의 동작 원리를 정확히 이해해야 한다. 하지만 솔직히 말하면, 프로젝트 초기에 세운 가이드라인을 처음에는 잘 지켰지만 개발이 진행되면서 점점 일단 @Transactional 붙이고 보자는 식으로 습관적으로 사용했던 적이 많다. 당연히 이런 무분별한 사용은 여러 문제를 야기했고, 이를 계기로 JPA Transactional 사용법을 다시 점검하고 명확한 원칙을 정립해보고자 한다. @Transactional 남용하지 않기 @Transactional을 남용하면 어떤 일이 일어날 수 있는지 알아보자. 테스트 환경은 다음과 같다. hikari: maximum-pool-size: 1 connection-timeo... </summary> </entry> <entry><title>Application Load Balancer에 고정 IP 사용하기 (feat. VPC IPAM 통합)</title><link href="https://keencho.github.io/posts/aws-alb-static-ip/" rel="alternate" type="text/html" title="Application Load Balancer에 고정 IP 사용하기 (feat. VPC IPAM 통합)" /><published>2025-04-12T20:12:00+09:00</published> <updated>2025-04-12T20:12:00+09:00</updated> <id>https://keencho.github.io/posts/aws-alb-static-ip/</id> <content src="https://keencho.github.io/posts/aws-alb-static-ip/" /> <author> <name>keencho</name> </author> <category term="AWS" /> <summary> Application Load Balancer에 고정 IP 사용하기 (feat. VPC IPAM 통합) aws 콘솔 보다가 이런걸 발견했다. 궁금해서 찾아보니까 이런 글을 확인할 수 있었다. (마참내!) ALB에 고정IP를 사용하려고 앞에 NLB 붙이기, 프록시 서버 사용하기, Global Accelerator과 통합하기, Lambda 사용하기 등 다양한 방법들을 사용해왔다. 그런데 이제 ALB에 직접적으로 고정 IP를 사용할 수 있게 된 것이다. VPC IPAM이란? Amazon VPC IP Address Manager(IPAM)는 AWS 워크로드의 IP 주소를 보다 쉽게 계획, 추적 및 모니터링할 수 있게 해주는 VPC 기능이다. IPAM을 사용하면 조직, 계정, VPC 및 AWS 리전 전... </summary> </entry> <entry><title>야간 및 주말에 AWS Fargate 동적으로 운영하기</title><link href="https://keencho.github.io/posts/aws-fargate-dynamic-operation/" rel="alternate" type="text/html" title="야간 및 주말에 AWS Fargate 동적으로 운영하기" /><published>2024-12-14T08:12:00+09:00</published> <updated>2024-12-14T08:12:00+09:00</updated> <id>https://keencho.github.io/posts/aws-fargate-dynamic-operation/</id> <content src="https://keencho.github.io/posts/aws-fargate-dynamic-operation/" /> <author> <name>keencho</name> </author> <category term="AWS" /> <summary> 야간 및 주말에 AWS Fargate 동적으로 운영하기 사내에서만 사용하는 관리자(관제) 서비스가 있다. 아주 가끔 업무 시간외에 쓸일이 있긴 하지만 대부분의 경우 평일 21시 ~ 08시, 주말에는 전혀 사용하지 않는다. 클라우드의 장점중 필요한 만큼만 사용, 필요할 때만 사용을 중요한 장점으로 생각한다. 그래서 이 기회에 AWS Fargate 를 동적으로 운영해보기로 했다. :exclamation: 본 포스팅에서 소개하는 로직은, 제 개인적인 접근 방식이므로 실제 상용 시스템에 적용하기 전 철저한 테스트 과정이 필요합니다. 현재 아키텍처 현재 아키텍처는 다음과 같다. CloudFront에서 1차적인 요청을 처리하고 경로가 /api 로 시작한다면 api endpoints로 간주하여 로드... </summary> </entry> <entry><title>Arm 아키텍처에서 AAPT2 빌드 도구 사용하기</title><link href="https://keencho.github.io/posts/aapt2-arm/" rel="alternate" type="text/html" title="Arm 아키텍처에서 AAPT2 빌드 도구 사용하기" /><published>2024-09-22T08:12:00+09:00</published> <updated>2025-03-17T17:33:20+09:00</updated> <id>https://keencho.github.io/posts/aapt2-arm/</id> <content src="https://keencho.github.io/posts/aapt2-arm/" /> <author> <name>keencho</name> </author> <category term="Android" /> <summary> Arm 아키텍처에서 AAPT2 빌드 도구 사용하기 최근 개발서버의 아키텍처를 x86 에서 Arm 으로 변경했다. (더 싸서) 해당 서버에는 gitea, Jenkins, Nexus Repository 가 굴러가고 있었다. 마이그레이션은 그럭저럭 순조롭게 진행했는데 문제는 Jenkins job을 마이그레이션 하던중, 특정 job에서 안드로이드를 빌드하는 과정에서 나타났다. stage('android build') { steps { script { dir('android') { sh 'chmod +x gradlew' sh './gradlew assembleRelease' } ... </summary> </entry> <entry><title>Terraform으로 AWS 무중단 배포 인프라 구성하기 - 7. 마무리</title><link href="https://keencho.github.io/posts/terraform-aws-infra-7/" rel="alternate" type="text/html" title="Terraform으로 AWS 무중단 배포 인프라 구성하기 - 7. 마무리" /><published>2024-06-22T08:12:00+09:00</published> <updated>2024-06-22T14:59:22+09:00</updated> <id>https://keencho.github.io/posts/terraform-aws-infra-7/</id> <content src="https://keencho.github.io/posts/terraform-aws-infra-7/" /> <author> <name>keencho</name> </author> <category term="AWS" /> <category term="Terraform" /> <summary> Terraform으로 AWS 무중단 배포 인프라 구성하기 개요 기초 네트워크 테스트 환경 운영환경 (프론트) 운영환경 (백엔드) 마무리 Terraform으로 AWS ECS 무중단 배포 인프라 구성하기 - 7. 마무리 이 시리즈를 작성하면서 작성한 스크립트들이 완벽하다고 생각하진 않는다. 모듈화를 더 하거나 조금더 아름답게 스크립트들을 작성할 수 있었다고 생각한다. 또한 구성적으로도 미흡한 부분들이 존재한다. 엄격한 리소스 네이밍 규칙 Bastion Host 분리 RDS 프라이빗 서브넷으로 이전 ECR 수명 주기 정책 규칙 설정 상세한 Autoscaling 규칙 정의 배포, Scaling 이벤트 발생시 AWS SNS 트리거 컨테이너 환경변수 안... </summary> </entry> </feed>
